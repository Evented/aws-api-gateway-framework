'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.write=exports.generate=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};let collectResources=(()=>{var _ref=_asyncToGenerator(function*(){const resources={};const listings=_fs2.default.readdirSync(directories.resources).map(function(listing){return{id:listing.replace(/\..*$/,''),filePath:_path2.default.join(directories.resources,listing)}}).filter(function({filePath}){return _fs2.default.statSync(filePath).isFile()});const missingRequired=requiredResources.filter(function(requiredResource){return!listings.find(function({id}){return id===requiredResource})});if(missingRequired.length){throw new Error(`The following resources are required, but missing: ${missingRequired.join(', ')}`)}for(const _ref2 of listings){const{id,filePath}=_ref2;try{const{default:resource}=yield Promise.resolve().then(()=>require(`${filePath}`));Object.assign(resources,{[id]:resource})}catch(ex){console.error(`Unable to import ${filePath}`)}}return resources});return function collectResources(){return _ref.apply(this,arguments)}})();let collectModels=(()=>{var _ref3=_asyncToGenerator(function*(){const resources={};for(const listing of _fs2.default.readdirSync(directories.models)){const Name=pascalReplace(listing);Object.assign(resources,{[`${Name}Model`]:new AWSApiGatewayModel({RestApiId,ContentType:'application/json',Description:'',Name,Schema:JSON.stringify((yield Promise.resolve().then(()=>require(`${_path2.default.join(directories.models,listing)}`))))})})}return resources});return function collectModels(){return _ref3.apply(this,arguments)}})();let collectRoutes=(()=>{var _ref4=_asyncToGenerator(function*(){const resources={};const allMethods=[];const resoureMethods=new Map;yield(()=>{var _ref5=_asyncToGenerator(function*(dir=[]){const dirPath=_path2.default.join(directories.routes,...dir);for(const listing of _fs2.default.readdirSync(dirPath)){const pathArray=dir.concat(listing);const parentName=dir.map(pascalReplace).join('');const HttpMethod=pascalReplace(listing);const resourceName=`${parentName}${HttpMethod}`;const parent=parentName?{Ref:parentName}:rootParent;const fullPath=_path2.default.join(dirPath,listing);const stats=_fs2.default.statSync(fullPath);if(stats.isDirectory()){Object.assign(resources,{[resourceName]:new AWSApiGatewayResource({RestApiId,ParentId:parent,PathPart:listing})});resoureMethods.set(resourceName,[]);yield walk(pathArray)}else if(stats.isFile()){if(!validMethods.includes(HttpMethod)){console.error(`Invalid file in the Routes directory: ${fullPath}`);return}const{default:props}=yield Promise.resolve().then(()=>require(`${fullPath}`));props.isHead=HttpMethod==='HEAD';const Properties=props.rendered;Object.assign(Properties.Integration,Integration);Object.assign(resources,{[resourceName]:new AWSApiGatewayMethod(_extends({RestApiId,ResourceId:parent,AuthorizationType:isUnsafeMethod(HttpMethod)?'AWS_IAM':'NONE',HttpMethod},Properties))});allMethods.push(resourceName);if(Properties.MethodResponses[0].StatusCode!=='405'){resoureMethods.get(parentName).push(HttpMethod)}}}});function walk(){return _ref5.apply(this,arguments)}return walk})()();for(const[resourceId,methods]of resoureMethods.entries()){if(!methods.length){continue}const HttpMethod='OPTIONS';methods.push(HttpMethod);methods.sort();const method=new _Method2.default({requestTemplate:['{"statusCode":200}'],responses:[{StatusCode:200,template:'',headers:{'Access-Control-Allow-Headers':`'${['Content-Type','X-Amz-Date','Authorization','X-Api-Key','X-Amz-Security-Token'].join()}'`,'Access-Control-Allow-Methods':`'${methods.join()}'`},model:'Empty'}],Type:'MOCK',PassthroughBehavior:'WHEN_NO_MATCH'});Object.assign(resources,{[`${resourceId}${HttpMethod}`]:new AWSApiGatewayMethod(_extends({RestApiId,ResourceId:{Ref:resourceId},AuthorizationType:'NONE',HttpMethod},method.rendered))})}return{routes:resources,allMethods}});return function collectRoutes(){return _ref4.apply(this,arguments)}})();let collectCloudFormation=(()=>{var _ref6=_asyncToGenerator(function*(rootDir){const[CloudFormation,resources,models,{routes,allMethods}]=yield Promise.all([Promise.resolve().then(()=>require(`${rootDir}/CloudFormation.json`)),collectResources(),collectModels(),collectRoutes()]);resources.Deployment.DependsOn=allMethods;return Object.assign(CloudFormation,{Resources:_extends({},resources,models,routes)})});return function collectCloudFormation(_x){return _ref6.apply(this,arguments)}})();let generate=exports.generate=(()=>{var _ref7=_asyncToGenerator(function*(rootDir,pretty=true){for(const[key,val]of Object.entries(directoryNames)){Object.assign(directories,{[key]:_path2.default.join(rootDir,val)})}const template=yield collectCloudFormation(rootDir);const output=JSON.stringify(template,null,pretty?'\t':'');return{template,output}});return function generate(_x2){return _ref7.apply(this,arguments)}})();let write=exports.write=(()=>{var _ref8=_asyncToGenerator(function*(rootDir,pretty=true){const time=process.hrtime();const{template,output}=yield generate(rootDir,pretty);_fs2.default.writeFileSync(_path2.default.join(rootDir,'build','CloudFormation.json'),output);const[seconds,nanoseconds]=process.hrtime(time);const milliseconds=(seconds*1e9+nanoseconds)/1e6;console.info(`Finished in: ${milliseconds} ms`);console.info(`Output size: ${output.length/1e3} kb`);console.info(`Number of Resources: ${Object.keys(template.Resources).length}`)});return function write(_x3){return _ref8.apply(this,arguments)}})();var _fs=require('fs');var _fs2=_interopRequireDefault(_fs);var _path=require('path');var _path2=_interopRequireDefault(_path);var _index=require('./index');var _Method=require('./Method');var _Method2=_interopRequireDefault(_Method);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}const{AWSApiGatewayMethod,AWSApiGatewayModel,AWSApiGatewayResource}=_index.resources;const directoryNames={resources:'Resources',models:'Models',routes:'Routes'};const directories={};const RestApiId={Ref:'RestApi'};const requiredResources=['RestApi','IamRole','Deployment','Stage'];function pascalReplace(str){return str.replace(/([{}]|\..*)/g,'').replace(/^./,char=>char.toUpperCase())}const rootParent={'Fn::GetAtt':[RestApiId.Ref,'RootResourceId']};const Integration=Object.freeze({Credentials:{'Fn::GetAtt':['IamRole','Arn']},PassthroughBehavior:'NEVER'});const validMethods=Object.freeze(['DELETE','HEAD','GET','PATCH','POST','PUT']);function isUnsafeMethod(method){return /^(DELETE|PATCH|POST|PUT)$/.test(method)}